/* a minimalist set of CSS resets */

/* default to border-box */
html {
  box-sizing: border-box;
  font-size: 16px;
  height: 100%;
}

*,
*:before,
*:after {
  box-sizing: inherit;
}

/* struggled to get height down*/
body {
  min-height: 100%;
  overflow: auto;
  margin: 0rem;
  padding: 10px;
  /*font-family: sans-serif;*/
  line-height: 1.5;
  background-color:hsl(227, 10%, 10%);;
  color:white;
  
  overflow-x: hidden;
  overflow-y: hidden;
}

.contain {
  /*margin:absolute;
  height:100%;
  width: 100%;*/
  
  width:100px;
  height:100px;
  position:absolute;
  top:0;
  bottom:0;
  left:0;
  right:0;
  margin: auto;
  
}

/* images and videos max out at full width */
img,
video {
  height: auto;
  max-width: 100%;
}

h1.title
{
  font-family: cursive, verdana, arial, sans-serif;
  text-align: center;
}

p{
  text-align: center;
  height:30%;
  margin:10px;
  text-align: center;
}

p > span{
  color:red;
}

button {
  padding:10px;
  border-radius:10px;  /* rounds out borders to give bubbly buttons look */
}

div {
  height:100px;
  margin: 0 auto;
  display:flex;
  justify-content: center;
}

#ply_btn_space > button {
  width:100%;
  height:100%;
  margin:2px;
  position:relative;
}


.hidden {
  display: none;
}

/* button colors */
#btn1 {
  background: #A24343;
}
#btn2 {
  background: #5F9B47;
}
#btn3 {
  background: #9f2288;
}
#btn4 {
  background: #5A1D6F;
}
#btn5 {
  background: #494EEA;
}
#btn6 {
  background: #ff6f00;
}
/* button click colors */

#btn1:active, #btn1.lit {
   background: #fc1e08;
}
#btn2:active, #btn2.lit {
  background: #4EEA0F;
}
#btn3:active, #btn3.lit {
  background: #f808fc;
}
#btn4:active, #btn4.lit {
  background: #9300ff;
}
#btn5:active, #btn5.lit {
  background: #13bcff;
}
#btn6:active, #btn6.lit {
  background: #B20C0c;
}

button > .BB {
  height:100px;
  width:100px;
  margin:0px;
  display:flex;
  position:relative;
  flex-direction: row;
}



/* used online css to help with box shape and color
/*
  https://developer.mozilla.org/en/docs/Web/CSS/box-shadow
  box-shadow: [inset?] [top] [left] [blur] [size] [color];

  Tips:
    - We're setting all the blurs to 0 since we want a solid fill.
    - Add the inset keyword so the box-shadow is on the inside of the element
    - Animating the inset shadow on hover looks like the element is filling in from whatever side you specify ([top] and [left] accept negative values to become [bottom] and [right])
    - Multiple shadows can be stacked
    - If you're animating multiple shadows, be sure to keep the same number of shadows on hover/focus as non-hover/focus (even if you have to create a transparent shadow) so the animation is smooth. Otherwise, you'll get something choppy.
*/

/*Animate the size, inside*/
.fill:hover,
.fill:focus {
  box-shadow: inset 0 0 0 2em var(--hover);
}

/* Animate the size, outside*/
.pulse:hover, 
.pulse:focus {
  animation: pulse 1s;
  box-shadow: 0 0 0 2em transparent;
}

@keyframes pulse {
  0% { box-shadow: 0 0 0 0 var(--hover); }
}

/*Stack multiple shadows, one from the left, the other from the right*/
.close:hover,
.close:focus {
  box-shadow: 
    inset -3.5em 0 0 0 var(--hover),
    inset 3.5em 0 0 0 var(--hover);  
}

/*Size can also be negative; see how it's smaller than the element*/
.raise:hover,
.raise:focus {
  box-shadow: 0 0.5em 0.5em -0.4em var(--hover);
  transform: translateY(-0.25em);
}

/*Animating from the bottom*/
.up:hover,
.up:focus {
  box-shadow: inset 0 -3.25em 0 0 var(--hover);
}

/*And from the left*/
.slide:hover,
.slide:focus {
  box-shadow: inset 6.5em 0 0 0 var(--hover);
}

/*Multiple shadows, one on the outside, another on the inside*/
.offset {  
  box-shadow: 
    0.3em 0.3em 0 0 var(--color),
    inset 0.3em 0.3em 0 0 var(--color);
  
  &:hover,
  &:focus {
    box-shadow: 
      0 0 0 0 var(--hover),
      inset 6em 3.5em 0 0 var(--hover);
  }
}

/*Set button colors*/
/*If you wonder why use Sass vars or CSS custom properties...
  // Make a map with the class names and matching colors*/
$colors: (
  fill: #a972cb,
  pulse: #ef6eae, 
  close: #ff7f82, 
  raise: #ffa260, 
  up: #e4cb58, 
  slide: #8fc866, 
  offset: #19bc8b
);

/*Sass variables compile to a static string; CSS variables are dynamic and inherited
  // Loop through the map and set CSS custom properties using Sass variables*/
@each $button, $color in $colors {
  .#{$button} {
    --color: #{$color};
    --hover: #{adjust-hue($color, 45deg)};
  }
}

/*Now every button will have different colors as set above. We get to use the same structure, only changing the custom properties.*/
button {  
  color: var(--color);
  transition: 0.25s;
  
  &:hover,
  &:focus { 
    border-color: var(--hover);
    color: #fff;
  }
}

/* Pen styling, ignore*/


/* Basic button styles*/
button {
  background: none;
  border: 2px solid;
  font: inherit;
  line-height: 1;
  margin: 0.5em;
  padding: 1em 2em;
}

h1 { font-weight: 400; }

code { 
  color: #e4cb58;
  font: inherit;
}



/*used for start button for glow effect*/
.button {
  text-decoration: none;
  color: rgba(255, 255, 255, 0.8);
  padding: 15px 40px;
  border-radius: 4px;
  font-weight: normal;
  text-transform: uppercase;
  transition: all 0.2s ease-in-out;
}

.glow-button:hover {
  color: rgba(255, 255, 255, 1);
  box-shadow: 0 20px 30px rgba(145, 92, 182, .4);
}


.speed{
     width: 20%;
      height: 50%;
      top:50%;
      margin: 0;
      position: relative;
}

.top{
  height: 30%;
  position:relative;
  bottom: 0px;
  display: flex;
  flex-direction: column;
  justify-content: center;
  text-align: left;
}

.top > button{
   display: flex;
   justify-content: center;
   position: relative;
  justify-content: column;
}

.bottom{
  height: 40px;
  position:absolute;
  display: flex;
  flex-direction: column;
  float: bottom;
}

footer {
  position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: #a9a9a9;
    height: auto;
    width: 100vw;
    padding-top: 40px;
}